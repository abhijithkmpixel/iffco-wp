$(document).ready(function () {
    AOS.init({
        duration: 800,
    })
    $(window).scroll(function () {
        if (scrollY > 150) {
            $('body').addClass('sticky__header');
        } else if (scrollY < 100) {
            $('body').removeClass('sticky__header');

        }
    })
    $('#search__bar__toggle').click(function () {
        $("body").toggleClass('search__bar__open');
        $('header .header__inner > nav > ul > li').removeClass('mouse__over')

        $('body').removeClass('mobile__menu__open')
        $('#hamburger__menu__toggle').removeClass('is-active')
    })
    if (window.innerWidth > 1200) {
        $('header .header__inner > nav > ul > li').mouseover(function () {
            $('header .header__inner > nav > ul > li').removeClass('mouse__over')
            $(this).addClass('mouse__over')
        })
        $('header .header__inner > nav > ul > li').mouseleave(function () {
            $('header .header__inner > nav > ul > li').removeClass('mouse__over')
            // $(this).addClass('mouse__over')
        })
    } else {
        $('header .header__inner > nav > ul > li:not(.top__header__quick__access__cta)').click(function () {
            // $('header .header__inner > nav > ul > li').removeClass('mouse__over')
            $(this).toggleClass('mouse__over')
            $('body').removeClass('search__bar__open')

        })
    }
    $('.sub__menu_close').click(function () {
        $('header .header__inner > nav > ul > li').removeClass('mouse__over')
    })

    $('#hamburger__menu__toggle').click(function () {
        $('body').toggleClass('mobile__menu__open')
        $('body').removeClass('search__bar__open')
        $(this).toggleClass('is-active')
    })
    //brands slider
    $('.our__brands__showcase__slider').slick({
        infinite: true,
        slidesToShow: 5,
        slidesToScroll: 1,
        prevArrow: `<button class="slick__arrow slick__prev"><svg width="12" height="21"viewBox="0 0 12 21"
    fill="none" xmlns="http://www.w3.org/2000/svg"> <path
      d="M10 19L2 10.5L10 2"
      stroke="black"
      stroke-width="3"
      stroke-linecap="round"
      stroke-linejoin="round" />
  </svg>
</button>
`,
        nextArrow: `<button class="slick__arrow slick__next">
  <svg
    width="12"
    height="21"
    viewBox="0 0 12 21"
    fill="none"
    xmlns="http://www.w3.org/2000/svg">
    <path
      d="M2 19L10 10.5L2 2"
      stroke="black"
      stroke-width="3"
      stroke-linecap="round"
      stroke-linejoin="round" />
  </svg>
</button>`,
        responsive: [
            {
                breakpoint: 990,
                settings: {
                    slidesToShow: 3,
                    slidesToScroll: 1
                }
            },
            {
                breakpoint: 580,
                settings: {
                    slidesToShow: 1,
                    slidesToScroll: 1
                }
            }
        ]
    });


    // employyees testimony slider 
    $('.employee__image__slider').slick({
        infinite: true,
        slidesToShow: 1,
        slidesToScroll: 1,
        prevArrow: $('.btn__ctrl__prev'),
        nextArrow: $('.btn__ctrl__next'),
        asNavFor: $('.employee__testimony_slider')
    });
    $('.employee__testimony_slider').slick({
        infinite: true,
        slidesToShow: 1,
        slidesToScroll: 1,
        fade: true,
        asNavFor: $('.employee__image__slider')
    });

    // charts 

    $('.my__chart__wrap.donut__chart').each(function () {

        // const dataValues = $(this).attr('data-values').split(',').map(Number);

        // const total = dataValues.reduce((acc, value) => acc + value, 0);
        // const percentages = dataValues.map(value => (value / total) * 100);

        // const data = {
        //     labels: false,
        //     legend: {
        //         display: false,
        //     },
        //     circumference: 200,
        //     radius: 1,
        //     datasets: [{
        //         label: false,
        //         data: percentages,
        //         backgroundColor: [$(this).attr('data-colors'), "#fff"],
        //     }]
        // };

        // new Chart($(this).find('.myChart'), {
        //     type: 'doughnut',
        //     data: data,
        //     options: {
        //         tooltips: {
        //             callbacks: {
        //                 label: (tooltipItem, data) => {
        //                     const dataset = data.datasets[tooltipItem.datasetIndex];
        //                     const total = dataset.data.reduce((acc, value) => acc + value, 0);
        //                     const currentValue = dataset.data[tooltipItem.index];
        //                     const percentage = Math.round((currentValue / total) * 100);
        //                     return percentage + '%';
        //                 },
        //             },
        //         },
        //     },
        // });
        const initialData = {
            datasets: [{
                data: [0, 100], // Initial values, e.g., starting with 0% and 100%
                backgroundColor: [$(this).attr('data-colors'), '#fff']
            }]
        };
        // Create the initial doughnut chart
        // const ctx = $(this).find('.myChart');
        const myDoughnutChart = new Chart($(this).find('.myChart.donut'), {
            type: 'doughnut',
            data: initialData,
            options: {
                cutout: '50%', // Adjust cutout for the doughnut hole
                animation: false, // Disable initial animation
            }
        });

        // Use GSAP ScrollTrigger to initiate the animation when the chart comes into view
        gsap.registerPlugin(ScrollTrigger);

        ScrollTrigger.create({
            trigger: $(this).find('.myChart.donut'), // Replace with the ID or class of your chart container
            start: "0% 80%", // Adjust the trigger start position based on your layout
            end: "0% 70%", // Adjust the trigger end position based on your layout
            onEnter: () => {
                // Tween the data values when the chart comes into view
                gsap.to(myDoughnutChart.data.datasets[0].data, {
                    duration: 2,
                    endArray: $(this).attr('data-values').split(',').map(Number), // Target values, e.g., animating to 75% and 25%
                    onUpdate: function () {
                        myDoughnutChart.update(); // Update the chart on each GSAP update
                    }
                });
            },
            // onLeaveBack: () => {
            //     // If you want to reverse the animation when scrolling back
            //     gsap.to(myDoughnutChart.data.datasets[0].data, {
            //         duration: 1,
            //         endArray: [0, 100], // Initial values, e.g., starting with 0% and 100%
            //         onUpdate: function () {
            //             myDoughnutChart.update(); // Update the chart on each GSAP update
            //         }
            //     });
            // },
        });
    })

    $('.my__chart__wrap.bar__chart').each(function () {


        const initialData = {
            datasets: [{
                data: [0, 100], // Initial values, e.g., starting with 0% and 100%
                backgroundColor: [$(this).attr('data-colors'), '#fff']
            }]
        };
        // Create the initial doughnut chart
        const myDoughnutChart = new Chart($(this).find('.myChart.bar'), {
            type: 'bar',
            data: initialData,
            options: {
                cutout: '50%', // Adjust cutout for the doughnut hole
                animation: false, // Disable initial animation
            }
        });

        // Use GSAP ScrollTrigger to initiate the animation when the chart comes into view
        gsap.registerPlugin(ScrollTrigger);

        ScrollTrigger.create({
            trigger: $(this).find('.myChart.bar'), // Replace with the ID or class of your chart container
            start: "0% 80%", // Adjust the trigger start position based on your layout
            end: "0% 70%", // Adjust the trigger end position based on your layout
            onEnter: () => {
                // Tween the data values when the chart comes into view
                gsap.to(myDoughnutChart.data.datasets[0].data, {
                    duration: 2,
                    endArray: $(this).attr('data-values').split(',').map(Number), // Target values, e.g., animating to 75% and 25%
                    onUpdate: function () {
                        myDoughnutChart.update(); // Update the chart on each GSAP update
                    }
                });
            },
            // onLeaveBack: () => {
            //     // If you want to reverse the animation when scrolling back
            //     gsap.to(myDoughnutChart.data.datasets[0].data, {
            //         duration: 1,
            //         endArray: [0, 100], // Initial values, e.g., starting with 0% and 100%
            //         onUpdate: function () {
            //             myDoughnutChart.update(); // Update the chart on each GSAP update
            //         }
            //     });
            // },
        });
    })





    $(".my__chart__value").each(function (index, element) {
        var count = $(this),
            zero = {
                val: 0
            },
            num = count.data("number"),
            split = (num + "").split("."), // to cover for instances of decimals
            decimals = split.length > 1 ? split[1].length : 0;
        gsap.to(zero, {
            val: num,
            duration: 2,
            scrollTrigger: {
                trigger: element,
                start: "100% 100%",
            },
            onUpdate: function () {
                count.text(zero.val.toFixed(decimals));
            }
        });
    });
    $('.custom__bar__chart .custom__bar__chart__bar .custom__bar__chart__bar__inner').each(function (index, element) {
        gsap.to($(this), {
            height: $(this).attr('data-value'),
            duration: 2,
            scrollTrigger: {
                trigger: $(this),
                start: "100% 100%",
                // start:"0% 90%",
            }
        })
    })
    $(".custom__bar__chart__value").each(function (index, element) {
        var count = $(this),
            zero = {
                val: 0
            },
            num = count.data("number"),
            split = (num + "").split("."), // to cover for instances of decimals
            decimals = split.length > 1 ? split[1].length : 0;
        gsap.to(zero, {
            val: num,
            duration: 2,
            scrollTrigger: {
                trigger: element,
                start: "0% 100%",
            },
            onUpdate: function () {
                count.text(zero.val.toFixed(decimals));
            }
        });
    });
    $(".counters").each(function (index, element) {
        var count = $(this),
            zero = {
                val: 0
            },
            num = count.data("number"),
            split = (num + "").split("."), // to cover for instances of decimals
            decimals = split.length > 1 ? split[1].length : 0;
        gsap.to(zero, {
            val: num,
            duration: 2,
            scrollTrigger: {
                trigger: element,
                start: "0% 100%",
            },
            onUpdate: function () {
                count.text(zero.val.toFixed(decimals));
            }
        });
    });

    //banner counterslider
    // Initially, show the first element and hide others
    $('.custom__hero__carousel .custom__hero__carousel__item:not(:first)').addClass('hidden');

    // Function to toggle visibility at intervals
    function toggleVisibility() {
        var currentIndex = $('.custom__hero__carousel .custom__hero__carousel__item:not(.hidden)').index();
        $('.custom__hero__carousel .custom__hero__carousel__item').addClass('hidden');
        currentIndex = (currentIndex + 1) % $('.custom__hero__carousel .custom__hero__carousel__item').length;
        $('.custom__hero__carousel .custom__hero__carousel__item').eq(currentIndex).removeClass('hidden');
    }

    // Set up interval to toggle visibility every 2 seconds
    var interval = setInterval(toggleVisibility, 4000);
    $('.overlay__grid__wrap__item__footer__icon__carousel .overlay__grid__wrap__item__footer__icon__carousel__item:not(:first)').addClass('hidden');

    // Function to toggle visibility at intervals
    function toggleVisibility2() {
        var currentIndex = $('.overlay__grid__wrap__item__footer__icon__carousel .overlay__grid__wrap__item__footer__icon__carousel__item:not(.hidden)').index();
        $('.overlay__grid__wrap__item__footer__icon__carousel .overlay__grid__wrap__item__footer__icon__carousel__item').addClass('hidden');
        currentIndex = (currentIndex + 1) % $('.overlay__grid__wrap__item__footer__icon__carousel .overlay__grid__wrap__item__footer__icon__carousel__item').length;
        $('.overlay__grid__wrap__item__footer__icon__carousel .overlay__grid__wrap__item__footer__icon__carousel__item').eq(currentIndex).removeClass('hidden');
    }

    // Set up interval to toggle visibility every 2 seconds
    var interval2 = setInterval(toggleVisibility2, 4000);
})